name: SonarCloud

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build:
    name: Build and analyze
    runs-on: windows-latest
    steps:
      # Set up JDK 17 for SonarCloud analysis
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'zulu'

      # Checkout the repository
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Full clone for better analysis

      # Cache SonarCloud packages
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      # Cache SonarCloud scanner
      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v3
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      # Install SonarCloud scanner if not cached
      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner

      # Install Coverlet globally
      - name: Install Coverlet
        run: dotnet tool install --global coverlet.console

      # Begin SonarCloud analysis
      - name: SonarScanner Begin
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"DionNuijens_BrewingBuddies-Back-end-" /o:"dionnuijens" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.opencover.reportsPaths="coverage.opencover.xml"

      # Build the project
      - name: Build
        run: dotnet build

      # Run tests and generate coverage report
      - name: Run tests and generate coverage report
        run: coverlet ./UnitTests/bin/Debug/net8.0/UnitTests.dll --exclude-by-attribute 'Obsolete' --exclude-by-attribute 'GeneratedCode' --exclude-by-attribute 'CompilerGenerated' --exclude "[./BrewingBuddies-Entitys/*]*" --target "dotnet" --format lcov --targetargs "test --no-build" --output ./coverage/lcov.info

      # Publish coverage report to coveralls.io 
      - name: Publish coverage report to coveralls.io 
        uses: coverallsapp/github-action@v1.1.1
        with:
            github-token: ${{secrets.COVERALLS_REPO_TOKEN }}
            path-to-lcov: ./coverage/lcov.info

      # End SonarCloud analysis
      - name: SonarScanner End
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

      # Upload coverage report as artifact
      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: ./coverage/lcov.info


